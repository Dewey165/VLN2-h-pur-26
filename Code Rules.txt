Naming Conventions:

Classes and functions will use Pascal casing.
- First letter in each word is upper case, while the rest are lower case.
- Class examples: StudentClass, TeacherClass, AdminAccountClass.
- Function examples: SendSolution, AddUser, EditAssignment.

Variables will use Camel casing.
- First letter of the first word will always be lower case, while the following words will have the first letter in upper case.
- Variable example: firstNumber, userString.

Coding Practices:

It is very important that class, function and variable names are descriptive. Better to write a longer name that describes what is happening than not. 

We will endeavour to write classes that have one purpose and functions that do one thing, and therefore it's best to write the name for everything so that it describes it well:
FunctionThatReadsUserInputAndWritesItOut would be going a bit overboard though.

Why no Hungarian:

We will not be using additional Hungarian notation as extensive research has shown that it might create unncessesary complications and has a significant margin for error. 

This is due to the fact that if Hungarian is used for all variables, we have to decide whether we use Apps or Systems Hungarian and then decide on methods for those. All this could cause problems down the line with 6 people all touching a piece of code.

Whitespace issues:

All code will be indented with a single tab character and each subequent "child" code will be indented with a tab character as well.

Example:
firstCode
{
	secondCode
	}
	{
		thirdCode.
	}

Loops, if/else statements and all other expressions that inlcude brackets () will have no spaces. If there is a chose between having a space and skipping a space, we will skip the space.

Example: 
if(Bob == male)
for(int i = 0; i < 10; i++)

Curly brackets are to be included into every if else or switch statement and the curly braces will always start bellow the 
declaration, not in the same line.
We will include curly braces even if it is not strictly required, such as in one line if else statements like seen below.

Example:
for(int i = 0; i < 10; i++)
{
	code code code;
}

if (Bob == male)
{
	Console.Write("Bob is a dude.");
}

Documentation:

Comments are to be used to describe the document in detail and help the user.
Single line and multiple line comments are used.
The top of every page (Controller, View etc.) should have comments to describe what is being done.
Each class should have comments above it to describe the objects that it handles.
In the case of 1-2 lines of comments, then single line comments are used. 
Example:

// This code checks if Bob is male.

Otherwise we will use multiline comments.
Example:

/* Take me to your leader.
We will take over your world.
Because your tasty treats are better than ours. */
